@page "/database"
@using System.Data
@inject HttpClient Http

<h3>Database Management</h3>

@if (_loading)
{
    <p>Loading...</p>
}
else if (_error != null)
{
    <div class="alert alert-danger">
        @_error
    </div>
}
else
{
    <div class="database-info">
        <h4>Database Information</h4>
        <p>Name: @_databaseInfo?.Name</p>
        <p>Status: @(_databaseInfo?.IsConnected == true ? "Connected" : "Disconnected")</p>
    </div>

    @if (_databaseInfo?.Tables?.Any() == true)
    {
        <div class="tables-list">
            <h4>Tables</h4>
            <ul>
                @foreach (var table in _databaseInfo.Tables)
                {
                    <li>
                        <button @onclick="() => ShowTableSchema(table)">@table</button>
                    </li>
                }
            </ul>
        </div>

        @if (_selectedTable != null)
        {
            <div class="table-schema">
                <h4>Schema for @_selectedTable</h4>
                @if (_tableSchema != null)
                {
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Column Name</th>
                                <th>Data Type</th>
                                <th>Max Length</th>
                                <th>Nullable</th>
                                <th>Default Value</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var column in _tableSchema)
                            {
                                <tr>
                                    <td>@column.ColumnName</td>
                                    <td>@column.DataType</td>
                                    <td>@(column.MaxLength?.ToString() ?? "N/A")</td>
                                    <td>@(column.IsNullable ? "Yes" : "No")</td>
                                    <td>@(column.DefaultValue ?? "N/A")</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
            </div>
        }
    }

    <div class="query-editor">
        <h4>Query Editor</h4>
        <textarea @bind="_queryText" rows="5" class="form-control"></textarea>
        <button @onclick="ExecuteQuery" class="btn btn-primary mt-2">Execute Query</button>

        @if (_queryResult != null)
        {
            <div class="query-results mt-3">
                <h5>Results</h5>
                <table class="table">
                    <thead>
                        <tr>
                            @foreach (DataColumn column in _queryResult.Columns)
                            {
                                <th>@column.ColumnName</th>
                            }
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (DataRow row in _queryResult.Rows)
                        {
                            <tr>
                                @foreach (var item in row.ItemArray)
                                {
                                    <td>@(item?.ToString() ?? "NULL")</td>
                                }
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    </div>
}

@code {
    private bool _loading = true;
    private string? _error;
    private DatabaseInfoDto? _databaseInfo;
    private string? _selectedTable;
    private IEnumerable<TableSchemaDto>? _tableSchema;
    private string _queryText = "";
    private DataTable? _queryResult;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _databaseInfo = await Http.GetFromJsonAsync<DatabaseInfoDto>("api/database/info");
            _loading = false;
        }
        catch (Exception ex)
        {
            _error = ex.Message;
            _loading = false;
        }
    }

    private async Task ShowTableSchema(string tableName)
    {
        try
        {
            _selectedTable = tableName;
            _tableSchema = await Http.GetFromJsonAsync<IEnumerable<TableSchemaDto>>($"api/database/tables/{tableName}/schema");
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
    }

    private async Task ExecuteQuery()
    {
        try
        {
            var request = new QueryRequestDto { Query = _queryText };
            var response = await Http.PostAsJsonAsync("api/database/query", request);
            
            if (response.IsSuccessStatusCode)
            {
                _queryResult = await response.Content.ReadFromJsonAsync<DataTable>();
                _error = null;
            }
            else
            {
                var error = await response.Content.ReadFromJsonAsync<Dictionary<string, string>>();
                _error = error?["error"];
            }
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
    }
}
